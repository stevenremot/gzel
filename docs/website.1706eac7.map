{"version":3,"sources":["../gzel.js","index.js"],"names":["SCREEN_WIDTH","SCREEN_HEIGHT","toHexPart","val","toString","padStart","toHexColor","r","g","b","map","join","Renderer","target","game","canvas","document","createElement","width","height","querySelector","appendChild","ctx","getContext","save","fillStyle","fillRect","restore","x","y","a","globalAlpha","w","h","pixelsPtr","pixels","Uint8ClampedArray","getMemory","data","ImageData","slice","putImageData","graphics_fill","fill","bind","graphics_draw_pixel","drawPixel","graphics_draw_pixels","drawPixels","KEYS","LEFT","RIGHT","UP","DOWN","START","A","B","KEYBOARD_BINDINGS","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Enter","Space","Control","Input","pressedKeys","Set","key","cartridge","instance","exports","on_key_press","has","add","on_key_release","delete","targetNode","addEventListener","evt","press","release","fps","iterStep","Console","renderer","lastIterTime","timeCount","input","memory","buffer","Object","assign","debug_log","console","log","cosf","Math","cos","sinf","sin","exportAPI","fileUrl","fetch","then","response","arrayBuffer","WebAssembly","instantiate","wasm","env","start","init","loop","requestAnimationFrame","delay","time","update","bindToKeyboard","body","load"],"mappings":"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","file":"website.1706eac7.map","sourceRoot":"../website","sourcesContent":["const SCREEN_WIDTH = 320;\nconst SCREEN_HEIGHT = 240;\n\n// Graphics\nfunction toHexPart(val) {\n  return val.toString(16).padStart(2, \"0\");\n}\n\nfunction toHexColor(r, g, b) {\n  return \"#\" + [r, g, b].map(toHexPart).join(\"\");\n}\n\nclass Renderer {\n  constructor(target, game) {\n    this.game = game;\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = SCREEN_WIDTH;\n    canvas.height = SCREEN_HEIGHT;\n    document.querySelector(target).appendChild(canvas);\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\");\n  }\n\n  fill(r, g, b) {\n    this.ctx.save();\n    this.ctx.fillStyle = toHexColor(r, g, b);\n    this.ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n    this.ctx.restore();\n  }\n\n  drawPixel(x, y, r, g, b, a) {\n    this.ctx.save();\n    this.ctx.fillStyle = toHexColor(r, g, b);\n    this.ctx.globalAlpha = a / 255;\n    this.ctx.fillRect(x, y, 1, 1);\n    this.ctx.restore();\n  }\n\n  drawPixels(x, y, w, h, pixelsPtr) {\n    const pixels = new Uint8ClampedArray(this.game.getMemory());\n    const data = new ImageData(\n      pixels.slice(pixelsPtr, pixelsPtr + w * h * 4),\n      w,\n      h\n    );\n    this.ctx.putImageData(data, x, y);\n  }\n\n  exportAPI() {\n    return {\n      graphics_fill: this.fill.bind(this),\n      graphics_draw_pixel: this.drawPixel.bind(this),\n      graphics_draw_pixels: this.drawPixels.bind(this)\n    };\n  }\n}\n\n// Inputs\n\nconst KEYS = {\n  LEFT: 0,\n  RIGHT: 1,\n  UP: 2,\n  DOWN: 3,\n  START: 4,\n  A: 5,\n  B: 6\n};\n\nconst KEYBOARD_BINDINGS = {\n  ArrowLeft: KEYS.LEFT,\n  ArrowRight: KEYS.RIGHT,\n  ArrowUp: KEYS.UP,\n  ArrowDown: KEYS.DOWN,\n  Enter: KEYS.START,\n  Space: KEYS.A,\n  Control: KEYS.B\n};\n\nclass Input {\n  constructor(game) {\n    this.game = game;\n    this.pressedKeys = new Set();\n  }\n\n  press(key) {\n    if (\n      this.game.cartridge.instance.exports.on_key_press &&\n      !this.pressedKeys.has(key)\n    ) {\n      this.game.cartridge.instance.exports.on_key_press(key);\n      this.pressedKeys.add(key);\n    }\n  }\n\n  release(key) {\n    if (\n      this.game.cartridge.instance.exports.on_key_release &&\n      this.pressedKeys.has(key)\n    ) {\n      this.game.cartridge.instance.exports.on_key_release(key);\n      this.pressedKeys.delete(key);\n    }\n  }\n\n  bindToKeyboard(targetNode) {\n    targetNode.addEventListener(\"keydown\", evt => {\n      if (evt.key in KEYBOARD_BINDINGS) {\n        this.press(KEYBOARD_BINDINGS[evt.key]);\n      }\n    });\n\n    targetNode.addEventListener(\"keyup\", evt => {\n      if (evt.key in KEYBOARD_BINDINGS) {\n        this.release(KEYBOARD_BINDINGS[evt.key]);\n      }\n    });\n  }\n\n  exportAPI() {\n    return {};\n  }\n}\n\n// Main API\nconst fps = 60;\nconst iterStep = 1000 / fps;\n\nexport class Console {\n  constructor(target) {\n    this.renderer = new Renderer(target, this);\n    this.cartridge = null;\n    this.lastIterTime = null;\n    this.timeCount = 0;\n    this.input = new Input(this);\n  }\n\n  getMemory() {\n    return this.cartridge.instance.exports.memory.buffer;\n  }\n\n  exportAPI() {\n    return Object.assign(\n      {\n        debug_log(r) {\n          console.log(r);\n        },\n        cosf: Math.cos,\n        sinf: Math.sin\n      },\n      this.renderer.exportAPI(),\n      this.input.exportAPI()\n    );\n  }\n\n  load(fileUrl) {\n    return fetch(fileUrl)\n      .then(response => response.arrayBuffer())\n      .then(wasm => WebAssembly.instantiate(wasm, { env: this.exportAPI() }))\n      .then(cartridge => {\n        this.cartridge = cartridge;\n        this.start();\n      });\n  }\n\n  start() {\n    this.lastIterTime = null;\n    this.timeCount = 0;\n    this.cartridge.instance.exports.init();\n    this.loop();\n  }\n\n  loop() {\n    requestAnimationFrame(time => {\n      if (this.lastIterTime !== null) {\n        const delay = time - this.lastIterTime;\n        this.timeCount += delay >= 1000 ? 0 : delay;\n\n        while (this.timeCount > iterStep) {\n          this.cartridge.instance.exports.update(iterStep);\n          this.timeCount -= iterStep;\n        }\n      }\n\n      this.lastIterTime = time;\n      this.loop();\n    });\n  }\n}\n","import { Console } from '../gzel.js';\n\nconst game = new Console(\"#canvas\");\ngame.input.bindToKeyboard(document.body);\ngame.load(\n    './breakout.wasm'\n);\n"]}